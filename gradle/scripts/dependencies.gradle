apply from: 'gradle/scripts/helpers.gradle'

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = 'CurseMaven'
                url = 'https://cursemaven.com'
            }
        }
        filter {
            includeGroup 'curse.maven'
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = 'Modrinth'
                url = 'https://api.modrinth.com/maven'
            }
        }
        filter {
            includeGroup 'maven.modrinth'
        }
    }
    mavenLocal() // Must be last for caching to work
}

dependencies {
    modImplementation("curse.maven:kubejs-238086:5853326")
    modImplementation("curse.maven:rhino-416294:6186971")
    modImplementation("curse.maven:architectury-api-419699:5137938")

    /// Tips for `${mod_id}` in mods.toml breaking runClient: remove `out` folder (generated by Idea).
    /// Contents inside `run` is not reachable by processResources, but will be read by "UnionFileSystem" when loading
    /// mods.toml

    // [modernfix-forge-5.24.4+mc1.20.1](https://www.curseforge.com/minecraft/mc-mods/modernfix/files/6837713)
    modRuntimeOnly("curse.maven:modernfix-790626:6837713")
    // in theory Forge can find the MixinExtra inside ModernFix, but it's somehow not working
    runtimeOnly("io.github.llamalad7:mixinextras-forge:0.4.1")
    // [Embeddium 0.3.31](https://www.curseforge.com/minecraft/mc-mods/embeddium/files/5681725)
    modRuntimeOnly("curse.maven:embeddium-908741:5681725")
    // ferritecore-6.0.1-forge
    modRuntimeOnly("curse.maven:ferritecore-429235:4810975")

    // additional dependencies can be specified using loom's regular format
    // specifying a "mod" dependency (like modImplementation or modApi)
    // will cause loom to remap the file to your specified mappings

    // in this example, we'll be adding JEI as a dependency
    // according to their developer example on GitHub
    // see: https://github.com/mezz/JustEnoughItems/wiki/Getting-Started
    // compile against the JEI API but do not include it at runtime
    // don't worry about loom "not finding a forge mod" here,
    // JEI's api just doesn't have any class with an @Mod annotation
//     modCompileOnly("mezz.jei:jei-1.16.5:${jei_version}:api")
    // at runtime, use the full JEI jar:
//     modRuntimeOnly("mezz.jei:jei-1.16.5:${jei_version}")

    // Example - Dependency descriptor:
    // 'com.google.code.gson:gson:2.8.6' << group: com.google.code.gson, name:gson, version:2.8.6
    // 'group:name:version:classifier' where classifier is optional

    // Example - CurseMaven dependencies:
    // 'curse.maven:had-enough-items-557549:4543375' << had-enough-items = project slug, 557549 = project id, 4543375 = file id
    // Full documentation: https://cursemaven.com/

    // Example - Modrinth dependencies:
    // 'maven.modrinth:jei:4.16.1.1000' << jei = project name, 4.16.1.1000 = file version
    // Full documentation: https://docs.modrinth.com/docs/tutorials/maven/

    // Transitive dependencies:
    // (Dependencies that your dependency depends on)
    // If you wish to exclude transitive dependencies in the described dependencies
    // Use a closure as such:
//     implementation ('com.google.code.gson:gson:2.8.6') {
//         transitive = false
//     }

    // Shadowing Jars
    // Example:
//     shade("mezz.jei:jei-1.16.5:${jei_version}")
    // To prevent classpath collision, you can use "relocate" to relocate shaded
    // dependencies, see "shadowJar" task below

    // Local Libraries
    // not quite recommended, but will be useful when the library you need is not avaliable
    // via any of known mavens
    file("./gradle/local_libs").eachFile {
        if (it.isFile() && it.name.endsWith(".jar")) {
            modImplementation(files(rootDir.relativePath(it)))
        }
    }
}

shadowJar {
    archiveClassifier.set("dev-shadow")

    // here you can relocate packages, for example:
//    relocate("io.github.classgraph", "zzzank.probejs.shaded.classgraph")
    // User Guide from the Shadow plugin itself: https://gradleup.com/shadow/

    configurations = [project.configurations.shade]
}
